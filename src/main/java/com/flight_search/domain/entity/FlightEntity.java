package com.flight_search.domain.entity;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.context.annotation.Profile;

import java.util.Collection;

/**
 * Represents a flight entity in the database.
 */
@Profile("test")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Entity
@Table(name = "flights")
public class FlightEntity {

    /**
     * The unique identifier of the flight.
     * This field is automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "flights_seq")
    @SequenceGenerator(name = "flights_seq", sequenceName = "custom_flights_id_seq", allocationSize = 1)
    private Long id;

    /**
     * The departure airport of the flight.
     * This field cannot be null.
     */
    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.MERGE)
    @JoinColumn(name = "departure_airport_id", referencedColumnName = "id")
    @NotNull
    private AirportEntity departureAirport;

    /**
     * The arrival airport of the flight.
     * This field cannot be null.
     */
    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.MERGE)
    @JoinColumn(name = "arrival_airport_id", referencedColumnName = "id")
    @NotNull
    private AirportEntity arrivalAirport;

    /**
     * The date and time when the flight departs.
     * This field cannot be null.
     */
    @NotNull
    private String departureDateTime;

    /**
     * The date and time when the flight returns (if it's a round trip).
     * This field is optional.
     */
    private String returnDateTime;

    /**
     * The price of the flight.
     * This field cannot be null.
     */
    @NotNull
    private Double price;

}
